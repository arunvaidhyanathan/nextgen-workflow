{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red202\green202\blue202;\red24\green24\blue24;\red91\green165\blue255;
\red238\green88\blue85;\red99\green112\blue125;\red219\green219\blue223;\red19\green19\blue19;\red223\green219\blue218;
\red134\green196\blue255;}
{\*\expandedcolortbl;;\cssrgb\c83137\c83137\c83137;\cssrgb\c12157\c12157\c12157;\cssrgb\c42353\c71373\c100000;
\cssrgb\c95686\c43922\c40392;\cssrgb\c46275\c51373\c56471;\cssrgb\c88627\c88627\c89804;\cssrgb\c9804\c9804\c9804;\cssrgb\c89804\c88627\c88235;
\cssrgb\c58824\c81569\c100000;}
\margl1440\margr1440\vieww30040\viewh18340\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
Entitlement Models (RBAC \cf4 &\cf2  ABAC)\
\
This dual approach provides robust, multi\cf4 -\cf2 layered security.\
\
#### A. RBAC \cf5 in\cf2  PostgreSQL (coarse\cf4 -\cf2 grained access)\
\
This model defines the roles \cf5 and\cf2  which workflow tasks they \cf5 are\cf2  allowed \cf5 to\cf2  perform. It lives \cf5 in\cf2  the `nextgen\cf4 -\cf2 workflow.entitlements` schema.\
\
\cf4 **\cf2 Schema Definition:\cf4 **\cf2 \
\
```\cf5 sql\cf2 \
\pard\pardeftab720\partightenfactor0
\cf6 -- entitlements.roles: Defines the job functions from your spreadsheet.\cf2 \
\pard\pardeftab720\partightenfactor0
\cf5 CREATE\cf2  \cf5 TABLE\cf2  entitlements.roles (\
    role_id SERIAL \cf5 PRIMARY\cf2  KEY,\
    role_name \cf5 VARCHAR\cf2 (\cf4 100\cf2 ) \cf5 UNIQUE\cf2  \cf5 NOT\cf2  \cf5 NULL\cf2  \cf6 -- e.g., 'er_investigator', 'eo_head'\cf2 \
);\
\
\pard\pardeftab720\partightenfactor0
\cf6 -- entitlements.permissions: Defines specific actions that can be performed.\cf2 \
\cf6 -- These often map 1:1 with BPMN user task IDs.\cf2 \
\pard\pardeftab720\partightenfactor0
\cf5 CREATE\cf2  \cf5 TABLE\cf2  entitlements.permissions (\
    permission_id SERIAL \cf5 PRIMARY\cf2  KEY,\
    permission_name \cf5 VARCHAR\cf2 (\cf4 100\cf2 ) \cf5 UNIQUE\cf2  \cf5 NOT\cf2  \cf5 NULL\cf2  \cf6 -- e.g., 'task:assign_investigator', 'action:approve_closure'\cf2 \
);\
\
\pard\pardeftab720\partightenfactor0
\cf6 -- entitlements.role_permissions: Maps which roles get which permissions.\cf2 \
\pard\pardeftab720\partightenfactor0
\cf5 CREATE\cf2  \cf5 TABLE\cf2  entitlements.role_permissions (\
    role_id \cf5 INT\cf2  \cf5 REFERENCES\cf2  entitlements.roles(role_id),\
    permission_id \cf5 INT\cf2  \cf5 REFERENCES\cf2  entitlements.permissions(permission_id),\
    \cf5 PRIMARY\cf2  KEY (role_id, permission_id)\
);\
\
-- Populate Roles\
INSERT INTO entitlements.roles (role_name) VALUES\
('eo_intake_analyst'),\
('eo_head'),\
('er_investigation_manager'),\
('er_investigator');\
\
-- Populate Permissions\
INSERT INTO entitlements.permissions (permission_name) VALUES\
('task:create_case'),\
('task:approve_closures'),\
('task:assign_investigator'),\
('task:conduct_investigation');\
\
-- Map Permissions to Roles\
-- EO Head can approve closures\
INSERT INTO entitlements.role_permissions (role_id, permission_id) VALUES\
((SELECT role_id FROM entitlements.roles WHERE role_name = 'eo_head'), (SELECT permission_id FROM entitlements.permissions WHERE permission_name = 'task:approve_closures'));\
\
-- ER Manager can assign investigators\
INSERT INTO entitlements.role_permissions (role_id, permission_id) VALUES\
((SELECT role_id FROM entitlements.roles WHERE role_name = 'er_investigation_manager'), (SELECT permission_id FROM entitlements.permissions WHERE permission_name = 'task:assign_investigator'));\
\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf7 \cb8 B. ABAC in Cerbos 0.14.0 (fine-grained, instance-level access)\cb1 \
\pard\pardeftab720\sa360\partightenfactor0
\cf7 \cb8 This model secures the data within a case. It answers the question, "This user is an investigator, but can they see this specific case?"\cb1 \
\cb8 Cerbos Policy File: 
\f2\b\fs26 \cf7 \cb3 policies/case.yaml
\f1\b0\fs28 \cf7 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf9 \
\pard\pardeftab720\partightenfactor0

\f0 \cf2 \cb3     
\fs26 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 # apiVersion, resourcePolicy, etc. are standard Cerbos headers\cf2 \
apiVersion: \cf10 \cb3 "api.cerbos.dev/v1"\cf2 \cb3 \
resourcePolicy:\
  resource: \cf10 \cb3 "case"\cf2 \cb3 \
  version: \cf10 \cb3 "0.14.0"\cf2 \cb3 \
  importDerivedRoles:\
    - common_roles \cf6 # Assumes a file with common roles like 'manager' is imported\cf2 \
\
  \cf6 # These roles are dynamically determined for each request based on the case data\cf2 \
  derivedRoles:\
    - name: assignee\
      parentRoles: [\cf10 \cb3 "user"\cf2 \cb3 ]\
      condition:\
        match:\
          \cf6 # True if the user's ID is in the list of assignees for the case\cf2 \
          expr: \cf10 \cb3 "request.principal.id in request.resource.attr.assigneeIds"\cf2 \cb3 \
\
    - name: unit_manager\
      parentRoles: [\cf10 \cb3 "manager"\cf2 \cb3 ] \cf6 # Assumes user has a 'manager' role from their profile\cf2 \
      condition:\
        match:\
          \cf6 # True if the manager's department matches the case's department\cf2 \
          expr: \cf10 \cb3 "request.principal.attr.department == request.resource.attr.department"\cf2 \cb3 \
\
  \cf6 # Rules define who can perform actions on a case\cf2 \
  rules:\
    \cf6 # Any authenticated user can create a new case\cf2 \
    - actions: [\cf10 \cb3 "create"\cf2 \cb3 ]\
      effect: EFFECT_ALLOW\
      roles: [\cf10 \cb3 "user"\cf2 \cb3 ]\
\
    \cf6 # The assigned user can view, edit, and add details to their own case\cf2 \
    - actions: [\cf10 \cb3 "view"\cf2 \cb3 , \cf10 \cb3 "edit"\cf2 \cb3 , \cf10 \cb3 "addNarrative"\cf2 \cb3 ]\
      effect: EFFECT_ALLOW\
      derivedRoles: [\cf10 \cb3 "assignee"\cf2 \cb3 ]\
\
    \cf6 # The manager of the unit can view any case in their department and perform management actions\cf2 \
    - actions: [\cf10 \cb3 "view"\cf2 \cb3 , \cf10 \cb3 "assign"\cf2 \cb3 , \cf10 \cb3 "review"\cf2 \cb3 , \cf10 \cb3 "reassign"\cf2 \cb3 ]\
      effect: EFFECT_ALLOW\
      derivedRoles: [\cf10 \cb3 "unit_manager"\cf2 \cb3 ]\
\
    \cf6 # Only an EO Head can perform the final approval\cf2 \
    - actions: [\cf10 \cb3 "approveClosure"\cf2 \cb3 ]\
      effect: EFFECT_ALLOW\
      roles: [\cf10 \cb3 "eo_head"\cf2 \cb3 ] \cf6 # This is a static role check\cf2 \
\
    \cf6 # Default to denying access\cf2 \
    - actions: [\cf10 \cb3 "*"\cf2 \cb3 ]\
      effect: EFFECT_DENY}