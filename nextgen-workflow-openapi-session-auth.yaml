openapi: 3.0.3
info:
  title: NextGen Workflow API - Session Authentication
  version: 2.0.0
  description: |
    The official RESTful API for the OneCMS application with simplified session-based authentication. It provides all necessary endpoints for case creation, management, user worklists, and administration. All requests must be authenticated via session ID headers.
    
    ## Key Features
    - **Simplified Authentication**: Session-based authentication with X-Session-Id headers
    - **Case Management**: Create, update, and manage investigation cases
    - **Workflow Integration**: Task-based workflow with Flowable BPMN engine
    - **Role-Based Access**: Cerbos-powered authorization with fine-grained permissions
    - **Multi-Department Support**: HR, Legal, Security, and Investigation workflows
    
    ## Authentication
    All API endpoints (except login) require session-based authentication via `X-Session-Id` header.
    The API Gateway automatically adds `X-User-Id` headers to downstream services.
    
    ### Authentication Flow:
    1. POST /auth/login â†’ Get sessionId
    2. Include X-Session-Id header in all subsequent requests
    3. Session expires after 30 minutes of inactivity
    
    ### Header Requirements:
    - **X-Session-Id**: Session identifier obtained from login (required for all protected endpoints)
    - **X-User-Id**: Automatically injected by API Gateway based on session validation
  contact:
    name: NextGen Workflow Development Team
    email: dev-team@workflow.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Local Development Server (API Gateway)
  - url: http://localhost:3000/api  
    description: Local Frontend Proxy (Development)

security:
  - SessionAuth: []

tags:
  - name: Authentication
    description: User login and session management
  - name: Cases
    description: Core endpoints for creating and managing cases
  - name: Allegations
    description: Managing allegations within cases
  - name: Narratives
    description: Managing case investigation narratives
  - name: Worklist
    description: User task lists and workflow operations
  - name: Workflow Management
    description: Administrative workflow deployment and metadata (Admin Only)
  - name: Users & Entitlements
    description: User, role, and department management (Admin Only)
  - name: Reference Data
    description: Static data and lookup values

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: |
        Authenticate user credentials and return session ID for subsequent API calls.
        The returned sessionId should be included in the X-Session-Id header for all protected endpoints.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              intake_analyst:
                summary: Intake Analyst Login
                value:
                  username: "alice.intake"
                  password: "password123"
              investigator:
                summary: Investigator Login
                value:
                  username: "edward.inv"
                  password: "password123"
      responses:
        '200':
          description: Login successful - session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                successful_login:
                  summary: Successful Login Response
                  value:
                    success: true
                    sessionId: "f89a178b-3214-4999-b261-db44726f5d44"
                    message: "Login successful"
                    user:
                      id: "alice.intake"
                      username: "alice.intake"
                      firstName: "Alice"
                      lastName: "Intake" 
                      email: "alice@example.com"
                      isActive: true
                      attributes:
                        region: "US"
                        is_manager: false
                        employee_level: "Analyst"
        '401':
          description: Invalid credentials or inactive user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /auth/validate-session:
    get:
      tags:
        - Authentication
      summary: Validate Session
      description: Validate current session and return user information
      parameters:
        - name: X-Session-Id
          in: header
          required: true
          schema:
            type: string
          example: "f89a178b-3214-4999-b261-db44726f5d44"
      responses:
        '200':
          description: Session is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionValidationResponse'
        '401':
          description: Invalid or expired session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /auth/user:
    get:
      tags:
        - Authentication
      summary: Get Current User
      description: Retrieve current user information from session
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUserResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: Invalidate current session and logout user
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                  description: Optional session ID in request body
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logout successful"

  # Case Management Endpoints
  /cms/v1/cases/dashboard-cases:
    get:
      tags:
        - Cases
      summary: Get Dashboard Cases
      description: Retrieve cases for dashboard display with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: Dashboard cases retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CaseResponse'

  /cms/cases:
    post:
      tags:
        - Cases
      summary: Create New Case
      description: Create a new investigation case (INTAKE_ANALYST only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaseRequest'
      responses:
        '201':
          description: Case created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    get:
      tags:
        - Cases
      summary: List Cases
      description: Get paginated list of cases with optional filters
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [OPEN, IN_PROGRESS, UNDER_REVIEW, CLOSED]
        - name: department
          in: query
          schema:
            type: string
        - name: assignedTo
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Cases retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedCaseResponse'

  /cms/cases/{caseId}:
    get:
      tags:
        - Cases
      summary: Get Case Details
      description: Retrieve detailed information for a specific case
      parameters:
        - name: caseId
          in: path
          required: true
          schema:
            type: string
          example: "case-1"
      responses:
        '200':
          description: Case details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseDetailResponse'
        '404':
          description: Case not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    put:
      tags:
        - Cases
      summary: Update Case
      description: Update case details (authorized users only)
      parameters:
        - name: caseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCaseRequest'
      responses:
        '200':
          description: Case updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'

  # Workflow Endpoints
  /workflow/my-tasks:
    get:
      tags:
        - Worklist
      summary: Get My Tasks (Simplified)
      description: Retrieve all tasks assigned to the current user - defaults to OneCMS business app
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, CLAIMED, UNCLAIMED]
        - name: department
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Task list retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorklistItem'

  /workflow/{businessAppName}/tasks/my-tasks:
    get:
      tags:
        - Worklist
      summary: Get My Tasks by Business App
      description: Retrieve tasks assigned to current user for specific business application
      parameters:
        - name: businessAppName
          in: path
          required: true
          schema:
            type: string
          example: "onecms"
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorklistItem'

  /workflow/{businessAppName}/tasks/{taskId}:
    get:
      tags:
        - Worklist
      summary: Get Task Details
      description: Retrieve detailed task information including form data
      parameters:
        - name: businessAppName
          in: path
          required: true
          schema:
            type: string
          example: "onecms"
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetailResponse'

  /workflow/{businessAppName}/tasks/{taskId}/claim:
    post:
      tags:
        - Worklist
      summary: Claim Task
      description: Claim an unassigned task
      parameters:
        - name: businessAppName
          in: path
          required: true
          schema:
            type: string
          example: "onecms"
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task claimed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskOperationResponse'

  /workflow/{businessAppName}/tasks/{taskId}/complete:
    post:
      tags:
        - Worklist
      summary: Complete Task
      description: Complete a task with optional variables
      parameters:
        - name: businessAppName
          in: path
          required: true
          schema:
            type: string
          example: "onecms"
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskRequest'
      responses:
        '200':
          description: Task completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCompletionResponse'

components:
  securitySchemes:
    SessionAuth:
      type: apiKey
      in: header
      name: X-Session-Id
      description: |
        Session-based authentication using X-Session-Id header.
        Obtain session ID from /auth/login endpoint and include in all requests.
        Session expires after 30 minutes of inactivity.

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "alice.intake"
          description: User's login username
        password:
          type: string
          example: "password123"
          description: User's password

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Indicates if login was successful
        sessionId:
          type: string
          example: "f89a178b-3214-4999-b261-db44726f5d44"
          description: Unique session identifier for subsequent API calls
        message:
          type: string
          example: "Login successful"
          description: Human-readable response message
        user:
          $ref: '#/components/schemas/UserInfo'

    SessionValidationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Session is valid"
        user:
          $ref: '#/components/schemas/UserInfo'

    CurrentUserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      properties:
        id:
          type: string
          example: "alice.intake"
          description: Unique user identifier
        username:
          type: string
          example: "alice.intake"
          description: User's login username
        firstName:
          type: string
          example: "Alice"
        lastName:
          type: string
          example: "Intake"
        email:
          type: string
          example: "alice@example.com"
        isActive:
          type: boolean
          example: true
          description: Whether user account is active
        attributes:
          type: object
          additionalProperties: true
          example:
            region: "US"
            is_manager: false
            employee_level: "Analyst"
          description: Additional user attributes for authorization

    # Case Management Schemas
    CreateCaseRequest:
      type: object
      required:
        - title
        - description
        - departmentId
        - complainantName
      properties:
        title:
          type: string
          example: "Financial Fraud Investigation"
        description:
          type: string
          example: "Suspected unauthorized financial transactions"
        departmentId:
          type: integer
          example: 1
        complainantName:
          type: string
          example: "John Doe"
        complainantEmail:
          type: string
          example: "john.doe@example.com"
        occurrenceDate:
          type: string
          format: date
        dateReportedToCiti:
          type: string
          format: date
        cluster:
          type: string
          example: "North America"
        legalHold:
          type: boolean
          default: false
        outsideCounsel:
          type: boolean
          default: false

    UpdateCaseRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        status:
          type: string
          enum: [OPEN, IN_PROGRESS, UNDER_REVIEW, CLOSED]
        assignedToUserId:
          type: string

    CaseResponse:
      type: object
      properties:
        caseId:
          type: string
          example: "case-1"
        caseNumber:
          type: string
          example: "CMS-2025-001"
        title:
          type: string
          example: "Case 1 - Investigation Required"
        description:
          type: string
          example: "Sample case for dashboard testing"
        status:
          type: string
          enum: [OPEN, IN_PROGRESS, UNDER_REVIEW, CLOSED]
          example: "OPEN"
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
          example: "HIGH"
        complainantName:
          type: string
          example: "Complainant 1"
        complainantEmail:
          type: string
          example: "complainant1@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2025-08-10T05:15:42.964953"
        updatedAt:
          type: string
          format: date-time
          example: "2025-08-11T03:15:42.964963"
        createdBy:
          type: string
          example: "alice.intake"
        assignedTo:
          type: string
          nullable: true
        workflowInstanceKey:
          type: integer
          nullable: true
        allegations:
          type: array
          items:
            $ref: '#/components/schemas/AllegationResponse'
          nullable: true

    CaseDetailResponse:
      allOf:
        - $ref: '#/components/schemas/CaseResponse'
        - type: object
          properties:
            narratives:
              type: array
              items:
                $ref: '#/components/schemas/NarrativeResponse'
            entities:
              type: array
              items:
                $ref: '#/components/schemas/CaseEntityResponse'

    PagedCaseResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CaseResponse'
        page:
          $ref: '#/components/schemas/PageInfo'

    # Allegation Schemas
    AllegationResponse:
      type: object
      properties:
        allegationId:
          type: string
        caseId:
          type: string
        allegationType:
          type: string
        severity:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        description:
          type: string
        departmentClassification:
          type: string
        assignedGroup:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Narrative Schemas
    NarrativeResponse:
      type: object
      properties:
        narrativeId:
          type: string
        caseId:
          type: string
        narrativeType:
          type: string
        narrativeTitle:
          type: string
        narrativeText:
          type: string
        isRecalled:
          type: boolean
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time

    # Worklist Schemas
    WorklistItem:
      type: object
      properties:
        taskId:
          type: string
          example: "12345"
        taskName:
          type: string
          example: "EO Intake - Initial Review"
        taskDefinitionKey:
          type: string
          example: "eo-intake-review"
        assignee:
          type: string
        candidateGroups:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        priority:
          type: integer
        suspended:
          type: boolean
        caseContext:
          $ref: '#/components/schemas/CaseSummary'
        formKey:
          type: string
        processInstanceId:
          type: string
        processDefinitionKey:
          type: string
        queue:
          type: string
          example: "onecms-intake-queue"

    CaseSummary:
      type: object
      properties:
        caseId:
          type: string
        caseNumber:
          type: string
        title:
          type: string
        status:
          type: string
        priority:
          type: string
        departmentName:
          type: string

    TaskDetailResponse:
      allOf:
        - $ref: '#/components/schemas/WorklistItem'
        - type: object
          properties:
            formData:
              type: object
              additionalProperties: true
              description: Task-specific form data
            variables:
              type: object
              additionalProperties: true
              description: Process variables

    CompleteTaskRequest:
      type: object
      properties:
        variables:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
        outcome:
          type: string
          example: "APPROVE"
        comments:
          type: string

    TaskOperationResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        taskId:
          type: string
        status:
          type: string

    TaskCompletionResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        taskId:
          type: string
        processInstanceId:
          type: string
        nextTasks:
          type: array
          items:
            type: string

    # Entity Schemas
    CaseEntityResponse:
      type: object
      properties:
        entityId:
          type: string
        entityType:
          type: string
          enum: [PERSON, ORGANIZATION]
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        organizationName:
          type: string
        relationshipType:
          type: string

    # Common Schemas
    PageInfo:
      type: object
      properties:
        number:
          type: integer
          description: Current page number (0-based)
        size:
          type: integer
          description: Page size
        totalElements:
          type: integer
          description: Total number of elements
        totalPages:
          type: integer
          description: Total number of pages
        first:
          type: boolean
          description: Whether this is the first page
        last:
          type: boolean
          description: Whether this is the last page

    ApiError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Invalid or expired session"
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: "/api/cms/cases"